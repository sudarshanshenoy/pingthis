{"version":3,"sources":["CustomImage.js","App.js","reportWebVitals.js","index.js"],"names":["CustomImage","url","desc","useState","loaded","setLoaded","Fragment","onLoad","className","alt","src","App","galleryImages","setGalleryImages","loadingImages","setLoadingImages","pageNo","setPageNo","useEffect","fetchImages","pagenum","a","fetch","response","json","results","map","d","id","author","console","error","width","height","download_url","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAgBeA,MAZf,YAAqC,IAAdC,EAAa,EAAbA,IAAKC,EAAQ,EAARA,KAAQ,EAENC,oBAAS,GAFH,mBAE3BC,EAF2B,KAEnBC,EAFmB,KAIlC,OACE,eAAC,IAAMC,SAAP,WACE,qBAAKC,OAAQ,kBAAMF,GAAU,IAAOG,UAAS,wBAAmBJ,EAAS,UAAY,QAAUK,IAAKP,EAAMQ,IAAKT,IAC/G,qBAAKO,UAAS,mBAAcJ,EAAS,SAAW,UCyDvCO,MA/Df,WAAgB,IAAD,EAE6BR,mBAAS,IAFtC,mBAENS,EAFM,KAESC,EAFT,OAG6BV,oBAAS,GAHtC,mBAGNW,EAHM,KAGSC,EAHT,OAIeZ,mBAAS,GAJxB,mBAINa,EAJM,KAIEC,EAJF,KAMbC,qBAAU,WACRC,EAAYH,KACX,IAEH,IAAMG,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAClBN,GAAiB,GADC,kBAGOO,MAAM,sCAAD,OAAuCF,EAAvC,aAHZ,cAGVG,EAHU,gBAIIA,EAASC,OAJb,OAKhBC,GADIA,EAJY,QAKEC,KAAI,SAAAC,GAEpB,OADAA,EAAEC,GAAF,UAAUD,EAAEC,IAAZ,OAAiBD,EAAEE,QAAnB,OAA4BT,GACrBO,KAETV,EAAUG,GACVP,EAAiB,GAAD,mBAAKD,GAAL,YAAuBa,KAVvB,kDAYhBK,QAAQC,MAAR,MAZgB,QAclBhB,GAAiB,GAdC,0DAAH,sDAiBjB,OACE,eAAC,IAAMT,SAAP,WACE,yBAAQE,UAAU,qBAAlB,UACE,8BACE,qBAAKwB,MAAM,KAAKC,OAAO,KAAKxB,IAAI,eAAeC,IAAI,8EAErD,qBAAKF,UAAU,QAAf,SACE,oDAIJ,uBAAMA,UAAU,cAAhB,UACE,8BACE,qBAAKA,UAAU,eAAeC,IAAI,gBAAgBC,IAAI,6FAExD,gCACE,qBAAKF,UAAU,kBAAf,SAEII,EAAcc,KAAI,SAAAC,GAChB,OAAO,8BAAiB,cAAC,EAAD,CAAazB,KAAI,UAAKyB,EAAEE,QAAU5B,IAAK0B,EAAEO,gBAAhDP,EAAEC,SAIxBd,EAAgB,GACf,8BACE,wBAAQN,UAAU,WAAW2B,QAAS,kBAAMhB,EAAYH,EAAS,IAAjE,mCC7CCoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7782a50c.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction CustomImage({ url, desc }) {\n\n  const [loaded, setLoaded] = useState(false)\n\n  return (\n    <React.Fragment>\n      <img onLoad={() => setLoaded(true)} className={`gallery-image ${loaded ? 'visible' : 'hide'}`} alt={desc} src={url}></img>\n      <div className={`skeleton ${loaded ? 'd-none' : ''}`}></div>\n    </React.Fragment>\n  )\n}\n\nexport default CustomImage;\n","\nimport React, { useEffect, useState } from 'react';\nimport CustomImage from './CustomImage';\nimport './App.css';\n\nfunction App() {\n\n  const [galleryImages, setGalleryImages] = useState([]);\n  const [loadingImages, setLoadingImages] = useState(false);\n  const [pageNo, setPageNo] = useState(1);\n\n  useEffect(() => {\n    fetchImages(pageNo);\n  }, [])\n\n  const fetchImages = async (pagenum) => {\n    setLoadingImages(true);\n    try {\n      const response = await fetch(`https://picsum.photos/v2/list?page=${pagenum}&limit=6`)\n      let results = await response.json();\n      results = results.map(d => {\n        d.id = `${d.id}${d.author}${pagenum}`\n        return d\n      })\n      setPageNo(pagenum)\n      setGalleryImages([...galleryImages, ...results]);\n    } catch (e) {\n      console.error(e)\n    }\n    setLoadingImages(false);\n  }\n\n  return (\n    <React.Fragment>\n      <header className=\"header app-wrapper\">\n        <div>\n          <img width=\"80\" height=\"80\" alt=\"Gallery Logo\" src=\"https://i.pinimg.com/736x/e8/e0/81/e8e081875b58aaf2e1721d7e37e00b37.jpg\"></img>\n        </div>\n        <div className=\"title\">\n          <h1>Image Gallery</h1>\n        </div>\n      </header>\n\n      <main className=\"app-wrapper\">\n        <div>\n          <img className=\"header-image\" alt=\"Header design\" src=\"https://www.templarbit.com/images/blog/templarbit-illustration-csp-header-92837bc0.jpg\"></img>\n        </div>\n        <div>\n          <div className=\"gallery-section\">\n            {\n              galleryImages.map(d => {\n                return <div key={d.id} ><CustomImage desc={`${d.author}`} url={d.download_url} /></div>\n              })\n            }\n          </div>\n          {loadingImages ? '' :\n            <div>\n              <button className=\"loadmore\" onClick={() => fetchImages(pageNo + 1)}>Load More</button>\n            </div>\n          }\n        </div>\n\n      </main>\n\n    </React.Fragment >\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}